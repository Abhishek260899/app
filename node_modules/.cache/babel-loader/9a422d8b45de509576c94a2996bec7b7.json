{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from \"react\";\nimport Hammer from \"react-hammerjs\";\n\nvar Card = function (_Component) {\n  _inherits(Card, _Component);\n\n  function Card(props) {\n    _classCallCheck(this, Card);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      classList: [\"card_container\"]\n    };\n    return _this;\n  }\n\n  Card.prototype.componentDidMount = function componentDidMount() {};\n\n  Card.prototype.onPan = function onPan(event) {\n    if (this.props.isSwipeEnabled !== false) {\n      if (this.props.isLeftSwipeEnabled !== false && event.deltaX <= 0 || this.props.isRightSwipeEnabled !== false && event.deltaX >= 0) {\n        this.state.classList.push('moving');\n        if (event.deltaX === 0) return;\n        if (event.center.x === 0 && event.center.y === 0) return;\n        var xMulti = event.deltaX * 0.03;\n        var yMulti = event.deltaY / 80;\n        var rotate = xMulti * yMulti;\n        event.target.style.transform = 'translate(' + event.deltaX + 'px, ' + event.deltaY + 'px) rotate(' + rotate + 'deg)';\n      }\n    }\n  };\n\n  Card.prototype.onPanEnd = function onPanEnd(event) {\n    if (this.props.isSwipeEnabled !== false) {\n      if (this.props.isLeftSwipeEnabled !== false && event.deltaX <= 0 || this.props.isRightSwipeEnabled !== false && event.deltaX >= 0) {\n        var newClass = this.state.classList.filter(function (s) {\n          return s !== 'moving';\n        });\n        this.setState({\n          classList: newClass\n        });\n        var moveOutWidth = document.body.clientWidth;\n        var keep = Math.abs(event.deltaX) < 300;\n        event.target.classList.toggle('removed', !keep);\n\n        if (keep) {\n          event.target.style.transform = '';\n        } else {\n          var endX = Math.max(Math.abs(event.velocityX) * moveOutWidth, moveOutWidth);\n          var toX = event.deltaX > 0 ? endX : -endX;\n          var endY = Math.abs(event.velocityY) * moveOutWidth;\n          var toY = event.deltaY > 0 ? endY : -endY;\n          var xMulti = event.deltaX * 0.03;\n          var yMulti = event.deltaY / 80;\n          var rotate = xMulti * yMulti;\n          event.target.style.transform = 'translate(' + toX + 'px, ' + (toY + event.deltaY) + 'px) rotate(' + rotate + 'deg)'; // DO SWIPE ACTIONS\n\n          this.props.superOnSwipe();\n          if (this.props.onSwipe) this.props.onSwipe(this.props.data);\n\n          if (toX < 0 && this.props.onSwipeLeft) {\n            this.props.onSwipeLeft(this.props.data);\n          } else if (this.props.onSwipeRight) {\n            this.props.onSwipeRight(this.props.data);\n          }\n        }\n      }\n    }\n  };\n\n  Card.prototype.onDoubleTap = function onDoubleTap() {\n    if (this.props.onDoubleTap) this.props.onDoubleTap(this.props.data);\n  };\n\n  Card.prototype.render = function render() {\n    return React.createElement(Hammer, {\n      onPan: this.onPan.bind(this),\n      onPanEnd: this.onPanEnd.bind(this),\n      onDoubleTap: this.onDoubleTap.bind(this)\n    }, React.createElement(\"div\", {\n      className: this.state.classList.join(\" \"),\n      style: this.props.style\n    }, this.props.children));\n  };\n\n  return Card;\n}(Component);\n\nexport { Card as default };","map":null,"metadata":{},"sourceType":"module"}